import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class NearestPointsFinder {

    public static void main(String[] args) {
        // Beispiel-Eingabe: Liste von Punkten mit L채ngen- und Breitengraden
        List<Point> points = new ArrayList<>();
        points.add(new Point(40.7128, -74.0060)); // New York City
        points.add(new Point(34.0522, -118.2437)); // Los Angeles
        points.add(new Point(51.5074, -0.1278)); // London
        points.add(new Point(48.8566, 2.3522)); // Paris
        points.add(new Point(37.7749, -122.4194)); // San Francisco

        Point givenPoint = new Point(40.7128, -74.0060); // Beispiel: Gegebener Punkt

        List<Point> nearestPoints = findNearestPoints(points, givenPoint, 10);

        System.out.println("Die 10 Punkte am n채chsten zu (" + givenPoint.getLatitude() + ", " + givenPoint.getLongitude() + "):");
        for (Point point : nearestPoints) {
            System.out.println("Punkt: (" + point.getLatitude() + ", " + point.getLongitude() + ")");
        }
    }

    public static List<Point> findNearestPoints(List<Point> points, Point givenPoint, int k) {
        // Sortiere die Punkte nach ihrer Entfernung zum gegebenen Punkt
        points.sort(Comparator.comparingDouble(p -> distance(p, givenPoint)));

        // Gib die ersten k Punkte zur체ck
        return points.subList(0, k);
    }

    public static double distance(Point p1, Point p2) {
        double lat1 = p1.getLatitude();
        double lon1 = p1.getLongitude();
        double lat2 = p2.getLatitude();
        double lon2 = p2.getLongitude();

        // Haversine-Formel zur Berechnung der Entfernung zwischen zwei Punkten auf der Erdoberfl채che
        double radius = 6371; // Radius der Erde in Kilometern
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double distance = radius * c;

        return distance;
    }

    static class Point {
        private double latitude;
        private double longitude;

        public Point(double latitude, double longitude) {
            this.latitude = latitude;
            this.longitude = longitude;
        }

        public double getLatitude() {
            return latitude;
        }

        public double getLongitude() {
            return longitude;
        }
    }
}
